Minimum Spanning Tree algorithms

Tasks
=====

(1) Implement Kruskal’s method to compute the minimum spanning tree 'd' of a graph ‘g’.
(2) Implement Prim’s method to compute the minimum spanning tree 'd' of a graph ‘g’.
(3) Use the two methods to compute the minimum spanning tree of 100 testing graphs. Input data is provided in the following format.

Input File Format
=================

First line contains the number of nodes 'n' in the graph.
Next lines contains a lower triangular matrix representing the graph as an array. Element [i,j] of the matrix is the weight of the edge between nodes 'i' and 'j'. 

Submission
==========
(1) Results for Kruskal’s method.
    - Filenames: kruskal_%d.txt, where %d should be replaced by the ID of ‘g’.
    - Each file should contain the 'd' array at each iteration preceeded by the number of vertices in the tree (which should be at last iteration equals to ’n’ - 1).
    - Print the 'd' array in a separate line for each iteration.
    - The elements of the 'd' array should be separated by a single space.

(2) Results for Prim’s method.
    - Filenames: prim_%d.txt, where %d should be replaced by the ID of ‘g’.
    - Each file should contain the 'd' array at each iteration at each iteration preceded by the number of vertices in the tree (which should be at last iteration equals to ’n’ - 1).
    - Print the 'd' array in a separate line for each iteration.
    - The elements of the 'd' array should be separated by a single space.

(3) A text file "runtime.txt" containing the average runtime of each algorithm to compute the minimum spanning tree for all graphs, averaged over the number of graphs. The file should be
    in the following format:
    Prim: xx.xx seconds
    Kruskal: yy.yy seconds
    where xx.xx, yy.yy are the average runtime.

    These variables are the ones you should report in your runtime.txt file, one per line.

(4) Your code for all three methods.

Submission Code Format
=================

Formating for C/C++

(1) Input/Outputs

Your code should look for the files testing_graph_%d.txt in the folder "testing".
For example using:
    string filename = "./testing/testing_graph_0.txt";
    ifstream instream(filename.c_str());
    
You should output all your files in the current directory: all the prim_%d.txt, kruskal_%d.txt, runtime.txt.

NOTE:
Your code should not always create the files. Mainly because it is very slow. Your code should use the definition of the DOPRINT variable to know if you should or not create all the files. Use it the same way you use include guards:

    int main(){
      bool do_print = false;
      #ifdef DOPRINT
      do_print = true;
      #endif

      // you can pass it as an argument to your function to know whether you should print or not
      kruskal(graph, ..., do_print);

      // and/or use it directly in your main function
      if(do_print) {
        // print the data in the file
      }
    }
    

Then in the rest of your code you can use this "print" variable to know if you should print the files or not. This can be done in any file, this DOPRINT will be defined for all your .hpp and .cpp files by our compilation script.

Warning: the runtime.txt must be outputted all the times even when the DOPRINT variable is not defined.

(2) Code in the zip file

All your code should be in a folder that you zipped.
You only need to submit the source files: the .cpp and .hpp.
For example, the zip could contain:
    ./code/main.cpp
    ./code/kruskal.hpp
    ./code/kruskal.cpp
    
When you open your zipped folder in the unzipping assistant, you should only see one folder containing your sources, not all your sources directly (DEPTH = 1). 
Only the zip format is available (not rar!).

Formating for python

(1) Input/Outputs

Your code should contain at least one file called main.py .
This file should contain a function called "run".

Your code should look for the files testing_graph_%d.txt in the folder "testing".

NOTE:
Your code should not always create the files. Mainly because it is very slow. If you want not to create all the files when timing your execution, that call function should take one argument which will be false if you should not print and true if you should print.

The function should look like:

    def run(do_print):

        # some code

        if do_print:
            outputFile = open(outputFileName)
            # print the data in the file
    
Warning: the runtime.txt must be outputted all the times even when the argument do_print is set to false.

(2) Code in the zip file

All your code should be in a folder that you zipped
You need only to submit the .py files.
It should look like:
    ./code/main.py
    ./code/kruskal.py

When you open your zipped folder in the unzipping assistant, you should only see one folder containing your sources, not all your sources directly (DEPTH = 1). 
Only the zip format is available (not rar!).

Notes
=====

(1) Please divide yourselves up into groups of two.
(2) Each student should submit a separate zip file.
(3) The solutions will be checked automatically, so please adhere to the
    specified output format.
