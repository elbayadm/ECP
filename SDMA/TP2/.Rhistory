usCO2=scale(usCO2, center=FALSE)
usCO2=as.data.frame(scale(usCO2, center=FALSE))
usCO2=subset(usCO2, select = -c(Year) )
usCO2=as.data.frame(scale(usCO2, center=FALSE))
print(xtable(C.0),sanitize.text.function=identity,table.placement="H")
#Application II: Régression Ridge et Lasso:
##Préliminaires
###1,2,3.
Dans le fichier \textit{usa\_indicators.txt}, on dispose de 14 observations de 110 variables. Comme $n\ll p$, un modèle de régression linéaire simple n'est pas pertinent ($X^TX$ singulière).
La variable cible est: EN.ATM.CO2E.KT (CO2 emissions (kt)) dont une partie est la variable EN.CO2.BLDG.MT (CO2 emissions from residential buildings and commercial and public services (million metric tons))
```{r, echo=FALSE,fig.height=4}
usCO2=read.table("data/usa_indicators.txt",header=T,sep=';');
plot(usCO2$Year,usCO2$EN.ATM.CO2E.KT,pch=19,type='o',ylab="Emission CO2 (kt)",xlab="Année",main="Evolution des émissions CO2 entre 1996 et 2009")
#Suppression de la variable 'Year':
usCO2=subset(usCO2, select = -c(Year) )
usCO2=as.data.frame(scale(usCO2, center=FALSE))
```
###4.
Avoir des données de nature très diverse en entrée du modèle, ralentit la convergence vers une solution si on utilise la méthode du gradient. lm() utilisant une décomposition QR pour trouver les paramètres du modèle, la normalisation des régresseurs premet tout juste d'avoir des poids $\beta$ interprétables.
##Regression Ridge:
La régression Ridge consiste à minimiser la fonction cost:
$$E(\beta)=\|Y-X\beta\|^2,\:\text{sous la contrainte }\|\beta\|^2\leq c$$
```{r}
ridge.0=lm.ridge(EN.ATM.CO2E.KT~., data=usCO2,lambda=0)
ridge.100=lm.ridge(EN.ATM.CO2E.KT~., data=usCO2,lambda=100)
C.0=coef(ridge.0)
C.100=coef(ridge.100)
```
```{r,results='asis',echo=FALSE}
print(xtable(C.0),sanitize.text.function=identity,table.placement="H")
print(xtable(C.100),sanitize.text.function=identity,table.placement="H")
```
print(xtable(C.0),sanitize.text.function=identity,table.placement="H")
C.0
C.0=as.numeric(coef(ridge.0))
C.0
C.0=as.matrix(coef(ridge.0))
C.0=as.data.frame(coef(ridge.0))
C.0=coef(ridge.0)
C.0=coef(ridge.0)
names(C.0)
C.0=coef(ridge.0)
C.0=rbind(names(C.0),as.numeric(C.0))
View(C.0)
View(C.0)
C.0=as.numeric(C.0)
C.0=coef(ridge.0)
features=names(C.0)
C.0=as.numeric(C.0)
print(xtable(C.0,colnames=features),sanitize.text.function=identity,table.placement="H")
C.0
print(xtable(C.0),sanitize.text.function=identity,table.placement="H")
C.0=as.numeric(C.0)
print(xtable(C.0),sanitize.text.function=identity,table.placement="H")
C.0=as.matrix(C.0)
print(xtable(C.0),sanitize.text.function=identity,table.placement="H")
print(xtable(C.0,row.names=features),sanitize.text.function=identity,table.placement="H")
print(xtable(C.0,row.names=features),sanitize.text.function=identity,table.placement="H")
print(xtable(C.0,rownames=features),sanitize.text.function=identity,table.placement="H")
C.0=as.matrix(C.0)
rownames(C.0)=features
print(xtable(C.0),sanitize.text.function=identity,table.placement="H")
C.0=coef(ridge.0)
features=names(C.0)
C.0=as.matrix(C.0)
rownames(C.0)=features
C.100=coef(ridge.100)
C.100=as.matrix(C.100)
C=cbind(C.0,c.100)
C=cbind(C.0,C.100)
print(xtable(C),sanitize.text.function=identity,table.placement="H")
colnames(C)=c('$\\lambda=0$','$\\lmabda=100$')
C
print(xtable(C),sanitize.text.function=identity,table.placement="H")
features[1]="Intercept"
C.0=as.matrix(C.0)
rownames(C.0)=features
C.100=coef(ridge.100)
C.100=as.matrix(C.100)
C=cbind(C.0,C.100)
colnames(C)=c('$\\lambda=0$','$\\lmabda=100$')
C
print(xtable(C),sanitize.text.function=identity,table.placement="H")
print(xtable(C),table.placement="H")
print(xtable(C,digits=c(5,5)),sanitize.text.function=identity)
print(xtable(C,digits=c(0,5,5)),sanitize.text.function=identity)
print(xtable(C,signif=c(0,5,5)),sanitize.text.function=identity)
print(xtable(C,digits=c(0,5,5)),sanitize.text.function=identity)
print(xtable(C,digits=c(0,5,5)),sanitize.text.function=identity,tabular.environment = "longtable")
print(xtable(C,digits=c(0,5,5)),tabular.environment = "longtable")
print(xtable(C,digits=c(0,5,5)),tabular.environment = "longtable",floating =F)
print(xtable(C,digits=c(0,5,5)),tabular.environment = "longtable",floating =FALSE)
print(xtable(C,digits=c(0,5,5)),sanitize.text.function=identity,tabular.environment = "longtable",floating =FALSE)
C.0=coef(ridge.0)
sort(C.0)
I=sort(C.0)
I
C.0.top=sort(abs(C.0),index.return=TRUE)
C.0.top
index.0=sort(abs(C.0),index.return=TRUE)$ix[1:5]
indes.0
index.0
C.0.top=C.0(index.0)
C.0.top=C.0[index.0]
C.0=C.0[index.0]
C.0
index.0=sort(abs(C.0),index.return=TRUE,decreasing=T)$ix[1:5]
index.100=sort(abs(C.100),index.return=TRUE)$ix[1:5]
C.0=C.0[index.0]
C.0
index.0=sort(abs(C.0),index.return=TRUE,decreasing=T)$ix[1:5]
index.0
sort(abs(C.0),index.return=TRUE,decreasing=T)
C.0=coef(ridge.0)
index.0=sort(abs(C.0),index.return=TRUE,decreasing=T)$ix[1:5]
index.100=sort(abs(C.100),index.return=TRUE)$ix[1:5]
C.0=C.0[index.0]
C.0
C.0=coef(ridge.0)[-1]
C.0=coef(ridge.0)[-1]
C.0
index.0=sort(abs(C.0),index.return=TRUE,decreasing=T)$ix[1:5]
index.100=sort(abs(C.100),index.return=TRUE)$ix[1:5]
C.0=C.0[index.0]
C.0
C.100=coef(ridge.100)[-1]
index.100=sort(abs(C.100),index.return=TRUE,decreasing=T)$ix[1:5]
C.100=C.100[index.100]
C.100
names(C.0)
C=rbind(names(C.0),C.0,names(C.100),C.100)
C
C
C=rbind(C.0,C.100)
X
C
C=rbind(names(C.0),as.numeric(C.0),names(C.100),as.numeric(C.100))
C
C=rbind(names(C.0),signif(as.numeric(C.0),3),names(C.100),signif(as.numeric(C.100),3))
C
print(xtable(C),sanitize.text.function=identity)
print(xtable(C,include.rownames=FALSE),sanitize.text.function=identity)
print(xtable(C),sanitize.text.function=identity,include.rownames=FALSE)
print(xtable(C),sanitize.text.function=identity,include.rownames=FALSE,include.colnames=FALSE)
print(xtable(t(C)),sanitize.text.function=identity,include.rownames=FALSE,include.colnames=FALSE)
C=rbind(names(C.0),signif(as.numeric(C.0),3),names(C.100),signif(as.numeric(C.100),3))
rownames(C)=c('$\\lambda=0$','','$\\lambda=0$','');
C
print(xtable(t(C)),sanitize.text.function=identity,include.colnames=FALSE)
print(xtable(t(C)),sanitize.text.function=identity,include.rownames=FALSE)
rownames(C)=c("$\\lambda=0$"","","$\\lambda=100$"","");
rownames(C)=c("$\\lambda=0$","","$\\lambda=100$","");
print(xtable(t(C)),sanitize.text.function=identity,include.rownames=FALSE)
rownames(C)=c("$\\lambda=0$","-","$\\lambda=100$","-");
print(xtable(t(C)),sanitize.text.function=identity,include.rownames=FALSE)
C.0=coef(ridge.0)
C.0=sort(abs(C.0),index.return=TRUE,decreasing=T)[1:5]
C.0
C.0=coef(ridge.0)
C.0=sort(abs(C.0),index.return=TRUE,decreasing=T)$x[1:5]
C.0=C.0[index.0]
C.0=coef(ridge.0)
C.0=sort(abs(C.0),index.return=TRUE,decreasing=T)$x[1:5]
C.0
names(C.0)[0]="Intercept"
names(C.0)[1]="Intercept"
names(C.0)
C.0=coef(ridge.0)
names(C.0)[1]="Intercept"
names(C.0)
C.0=coef(ridge.0)
names(C.0)[1]="Intercept"
C.0=sort(abs(C.0),decreasing=T)[1:5]
C.0
C.100=coef(ridge.100)
names(C.100)[1]="Intercept"
C.100=sort(abs(C.100),decreasing=T)[1:5]
C.100
C=rbind(names(C.0),signif(as.numeric(C.0),3),names(C.100),signif(as.numeric(C.100),3))
rownames(C)=c("$\\lambda=0$","-","$\\lambda=100$","-");
print(xtable(t(C)),sanitize.text.function=identity,include.rownames=FALSE)
C.0=C.0[index.0]
C.0=coef(ridge.0)
names(C.0)[1]="Intercept"
index.0=sort(abs(C.0),index.return=TRUE,decreasing=T)$ix[1:5]
C.0=C.0[index.0]
C.0
coef(ridge.0)
ridge.0$coef
ridge.0$coef[1:5]
coef(ridge.0)[1:5]
ridge.100$coef[1:5]
coef(ridge.100)[1:5]
ridge=lm.ridge(EN.ATM.CO2E.KT~., data=usCO2,lambda=seq(0, 100, 0.01))
ridge
coef(ridge)
plot(L,ridge$GCV)
L=seq(0, 100, 0.01)
ridge=lm.ridge(EN.ATM.CO2E.KT~., data=usCO2,lambda=L)
plot(L,ridge$GCV)
plot(L,ridge$GCV)
plot(L,ridge$GCV,xlab='\\lambda')
plot(L,ridge$GCV,xlab=expression(lambda))
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation')
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',lwd=2)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',lwd=2,lty=2)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',lwd=2,lty=2)
ridge$GCV
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.4)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2)
plot(ridge)
plot(ridge,ylab="coefficients",xlab=ecpression(lambda))
plot(ridge,ylab="coefficients",xlab=ecpression(lambda))
par(mfrow=c(1,2))
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2)
plot(ridge)
select(ridge)
plot(L[1:10],ridge$GCV[1:10],xlab=expression(lambda),ylab='Cross-validation',cex=.2)
ridge$GCV[1:10]
sel=select(ridge)
which.min(rodge$GCV)
which.min(ridge$GCV)
ridge$GCV
ridge$GCV[2]
select(ridge)
attributes(select(ridge))
which.min(ridge$GCV)
as.numeric(which.min(ridge$GCV))
as.numeric(min(ridge$GCV))
as.numeric(L[which.min(ridge$GCV)])
L[which.min(ridge$GCV)]
coef(ridge)[1:10,]
coef(ridge)[which.min(ridge$GCV),]
plot(coef(ridge)[which.min(ridge$GCV),])
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4)
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4,xlab='j',ylab=expression(beta_j))
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4,xlab='j',ylab=expression(beta_j))
expression(beta_j)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2)
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4,xlab='j',ylab=expression(beta))
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4,xlab='j',ylab=expression(beta)[j])
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4,xlab='j',ylab=expression(beta)['j'])
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4,xlab='j',ylab=expression(beta)['j'])
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4,xlab='j',ylab=expression(beta''[j]))
plot(coef(ridge)[which.min(ridge$GCV),],cex=.4,xlab='j',ylab=expression(beta[j]))
plot(coef(ridge)[which.min(ridge$GCV),],cex=.2,xlab='j',ylab=expression(beta[j]))
plot(coef(ridge)[which.min(ridge$GCV),],cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',main.cex=.5)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=.5)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=.6)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=.8)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=1)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=.8)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=.8,adj=-1)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=.8,adj=.3)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=.8,adj=1)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2,main='Erreur de cross-validation',cex.main=.8,adj=0)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2)
title('Erreur de cross-validation',line=-2,cex=.8)
title('Erreur de cross-validation',line=-2,cex.main=.8)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2)
title('Erreur de cross-validation',line=-2,cex.main=.8)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2)
title('Erreur de cross-validation',line=-1,cex.main=.8)
plot(L,ridge$GCV,xlab=expression(lambda),ylab='Cross-validation',cex=.2)
title('Erreur de cross-validation',line=.5,cex.main=.8)
X=subset(usCO2, select = -c(EN.ATM.CO2E.KT) )
coeffs.ridge=coef(ridge)[which.min(ridge$GCV),]
plot(coeffs.ridge,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
title('Coefficients du modèle optimal',line=.5,cex.main=.8)
Yhat=as.matrix(X)%*%as.vector(coeffs.ridge)
dim(coeffs.ridgex )
dim(coeffs.ridge )
dim(as.vector(coeffs.ridge))
X=as.matrix(X)
dim(X)
as.vector(coeffs.ridge)
coeffs.ridge
X=cbind(1,as.matrix(X))
X
Yhat=X%*%as.vector(coeffs.ridge)
Y.true=usCO2$EN.ATM.CO2E.KT
Y.true-Yhat
RSE=sum((Y.true-Yhat)^2)
RSE
library(lars)
install.packages("lars")
X=subset(usCO2, select = -c(EN.ATM.CO2E.KT) )
Y=usCO2$EN.ATM.CO2E.KT
lasso=lars(X,Y,type="lasso")
library(lars)
lasso=lars(X,Y,type="lasso")
lasso=lars(as.matrix(X),as.vector(Y),type="lasso")
lasso
plot(lasso)
par(mfrow=c(1,1))
plot(lasso)
plot(lasso$lambda)
plot(lasso$lambda)
length(lasso$lambda)
plot(lasso)
lasso$lambda
coef(lasso)
coef(lasso)[28,]
lasso$lambda
plot(coef(lasso)[28,])
plot(find(coef(lasso)[28,]))
find(coef(lasso)[28,])
find(coef(lasso)[28,]!=0)
coef(lasso)[28,]>0
coef(lasso)[28,]!=0
which(coef(lasso)[28,]!=0)
plot(find(coef(lasso)[28,which(coef(lasso)[28,]!=0)]))
which(coef(lasso)[28,]!=0)])
which(coef(lasso)[28,]!=0)
as.numeric( which(coef(lasso)[28,]!=0))
plot(coef(lasso)[28,as.numeric( which(coef(lasso)[28,]!=0)))
plot(coef(lasso)[28,as.numeric( which(coef(lasso)[28,]!=0))
plot(coef(lasso)[28,as.numeric( which(coef(lasso)[28,]!=0))
plot(coef(lasso)[28,which(coef(lasso)[28,]!=0)])
plot(lasso$lambda,xlab="lasso step")
plot(coef(lasso)[28,which(coef(lasso)[28,]!=0)])
plot(lasso$lambda,xlab="lasso step")
plot(lasso$lambda,xlab="lasso step",ylab=expression(lambda))
plot(lasso$lambda,xlab="lasso step",ylab=expression(lambda),pch=19,cex=.5)
plot(lasso$lambda,xlab="lasso step",ylab=expression(lambda),pch=19,cex=.5,col=2)
plot(lasso,lwd=1)
plot(lasso,lwd=1,pch=19)
plot(lasso,lwd=4)
plot(lasso,lwd=2)
C.0=predict.lars(lasso,X,type="coefficients",mode="lambda",s=0)
C.0
C.0=predict.lars(lasso,X,type="coefficients",mode="lambda",s=0)
plot(C.0)
C.0=predict.lars(lasso,X,type="coefficients",mode="lambda",s=0)
C.0
plot(C.0)
plot(as.numeric(C.0))
as.numeric(C.0)
as.vector(C.0)
C.0
C.0=predict.lars(lasso,X,type="coefficients",mode="lambda",s=0)$coefficients
plot(C.0)
plot(C.0,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
C=predict.lars(lasso,X,type="coefficients",mode="lambda",s=c(.02,.04,.06))$coefficients
C
plot(C,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
C=predict.lars(lasso,X,type="coefficients",mode="lambda",s=c(.02,.04,.06))$coefficients
matlines(C,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
plot(c())
range(lasso)
lasso
plot(c(),xlim=range(1,27),ylim=c(0,1))
matlines(C,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
matlines(1:27,C,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
dim(C)
plot(c(),xlim=range(1,ncol(X)),ylim=c(0,1))
matlines(1:ncol(X),C,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
dim(1:ncol(X))
ncol(X)
1:ncol(X)
length(1:ncol(X))
plot(c(),xlim=range(1,ncol(X)),ylim=c(0,1))
matlines(1:ncol(X),C,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
matlines(1:108,C,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
matlines(C,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
dim(C)
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
max(C)
plot(c(),xlim=range(1,ncol(X)),ylim=c(0,max(C)))
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=c(1,2,3))
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1)
min(C)
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1)
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type='o')
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "b")
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "b")
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p")
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),cex=.2,xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p")
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p")
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "l")
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "l")
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "o")
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "o",pch=19)
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "o",pch=19)
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "o",pch=19,cex=.1)
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p",pch=19,cex=.1)
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p",pch=19,cex=.4)
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p",pch=19,cex=.3)
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)),mains='Coefficients',xlab='j',ylab=expression(beta[j]))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p",pch=19,cex=.3)
legend('topright',legend=c(expression(lambda=.02)))
legend('topright',legend=c(paste(expression(lambda),'=.02')))
legend('topright',legend=c(expression(paste(lambda,plain('='),.02))))
legend('topright',legend=c(expression(paste(lambda,plain('='),.02)),expression(paste(lambda,plain('='),.04)),expression(paste(lambda,plain('='),.06))))
expression(paste(lambda,plain('='),c(.02,.04,.06))
)
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)),mains='Coefficients',xlab='j',ylab=expression(beta[j]))
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)),main='Coefficients',xlab='j',ylab=expression(beta[j]))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p",pch=19,cex=.3)
legend('topright',legend=expression(paste(lambda, plain("="), c(0.02, 0.04, 0.06))))
plot(c(),xlim=range(1,ncol(X)),ylim=c(min(C),max(C)),main='Coefficients',xlab='j',ylab=expression(beta[j]))
matlines(1:ncol(X),t(C),xlab='j',ylab=expression(beta[j]),col=c(1,2,3),lty=1,type = "p",pch=19,cex=.3)
legend('topright',legend=c(expression(paste(lambda,plain('='),.02)),expression(paste(lambda,plain('='),.04)),expression(paste(lambda,plain('='),.06))))
legend('topright',legend=c(expression(paste(lambda,plain('='),.02)),expression(paste(lambda,plain('='),.04)),expression(paste(lambda,plain('='),.06))),pch=19,col=c(1,2,3))
plot(C.0,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
plot(lasso,main="")
plot(lasso)
lasso$meanx
lasso$coefs
lasso$coeficients
lass$df
lasso$df
lasso$lambda
lasso$R2
lasso$actions
lasso
lasso$actions
ac=lasso$actions
names(ac)
coef(lasso)
lasso$Cp
coef(lasso)
coef(lasso,lasso$lambda/min)
coef(lasso,lasso$lambda.min)
length(lass$actions)
length(lasso$actions)
coef(lasso)[length(lasso$actions),]
which(coef(lasso)[length(lasso$actions),]>0)
which(coef(lasso)[length(lasso$actions),]!=0)
which(coef(lasso)[length(lasso$actions),]!=0)
I=which(coef(lasso)[length(lasso$actions),]!=0)
I
names(I)
print(names(I))
print(xtable(names(I)))
I=names(which(coef(lasso)[length(lasso$actions),]!=0))
I
string(I)
print(xtable(I))
I=as.matrix(names(which(coef(lasso)[length(lasso$actions),]!=0)))
print(xtable(I))
I
cbind(I[1:6,],I[7:12,])
print(xtable(cbind(I[1:6,],I[7:12,])))
print(xtable(cbind(I[1:6,],I[7:12,])),include.rownames=FALSE)
print(xtable(cbind(I[1:6,],I[7:12,])),include.rownames=FALSE,include.colnames=FALSE)
I
C
which(C[1,]!=0)
Yhat=predict.lars(lasso,X,type="fit",mode="lambda",s=0.06)
RSE=sum((Y-Yhat)^2)
Yhat
Yhat=predict.lars(lasso,X,type="fit",mode="lambda",s=0.06)$fit
RSE=sum((Y-Yhat)^2)
Y
Yhat
Yhat-Y
RSE=sum((Y-Yhat)^2)
RSE
Yhat.ridge=X.intercept%*%as.vector(coeffs.ridge)
X=subset(usCO2, select = -c(EN.ATM.CO2E.KT) )
X.intercept=cbind(1,as.matrix(X))
Yhat.ridge=X.intercept%*%as.vector(coeffs.ridge)
Y=usCO2$EN.ATM.CO2E.KT
RSE.ridge=sum((Y-Yhat)^2)
RSE.ridge
Yhat.lasso=predict.lars(lasso,X,type="fit",mode="lambda",s=0.06)$fit
RSE.lasso=sum((Y-Yhat)^2)
RSE.lasso
Yhat.lasso
Yhat.ridge
Y
Yhat.ridge=t(X.intercept%*%as.vector(coeffs.ridge))
Y=usCO2$EN.ATM.CO2E.KT
RSE.ridge=sum((Y-Yhat)^2)
RSE.ridge
Yhat.ridge
Y
Yhat.lasso
Yhat.lasso=predict.lars(lasso,X,type="fit",mode="lambda",s=0.06)$fit
RSE.lasso=sum((Y-Yhat)^2)
RSE.ridge=sum((Y-Yhat.ridge)^2)
RSE.ridge
X.intercept=cbind(1,as.matrix(X))
Yhat.ridge=t(X.intercept%*%as.vector(coeffs.ridge))
Y=usCO2$EN.ATM.CO2E.KT
RSE.ridge=sum((Y-Yhat.ridge)^2)
RSE.lasso=mean((Y-Yhat.lasso)^2)
RSE.lasso=mean((Y-Yhat.lasso).^2)
RSE.lasso=mean((Y-Yhat.lasso)^2)
Y-Yhat.ridge
Y-Yhat.lasso
which(coeffs.ridge!=0)
coeffs.ridge=coef(ridge)[which.min(ridge$GCV),]
plot(coeffs.ridge,cex=.2,xlab='j',ylab=expression(beta[j]),col=2)
which(coeffs.ridge!=0)
count(which(coeffs.ridge!=0))
length(which(coeffs.ridge!=0))
coeffs.ridge
